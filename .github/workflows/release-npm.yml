name: Release to NPM

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.3

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release to NPM
    runs-on: ubuntu-latest
    
    env:
      TEST_PERSONAS_DIR: ${{ github.workspace }}/test-personas
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Prepare test environment
        shell: bash
        run: |
          echo "🔍 Setting up test environment..."
          echo "TEST_PERSONAS_DIR: $TEST_PERSONAS_DIR"
          
          # Create test personas directory for CI tests
          mkdir -p "$TEST_PERSONAS_DIR"
          echo "✅ Test personas directory created"

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test
        env:
          NODE_OPTIONS: '--max-old-space-size=4096 --experimental-vm-modules'
          CI: true

      - name: Verify version match
        shell: bash
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Validate semantic versioning format
          if ! [[ "$TAG_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Tag version ($TAG_VERSION) is not valid semantic versioning"
            exit 1
          fi
          
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) doesn't match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          
          echo "✅ Version match confirmed: $TAG_VERSION"

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          # Extract changelog for this version with error handling
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "Warning: CHANGELOG.md not found, using default message"
            CHANGELOG="Release version $TAG_VERSION"
          else
            # More robust parsing with fallback
            CHANGELOG=$(sed -n "/^## \[$TAG_VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d' || true)
            
            # If no changelog entry found, use a default
            if [ -z "$CHANGELOG" ]; then
              echo "Warning: No changelog entry found for version $TAG_VERSION"
              CHANGELOG="## [$TAG_VERSION] - $(date +%Y-%m-%d)\n\nRelease version $TAG_VERSION"
            fi
          fi
          
          # Save for release notes
          echo "$CHANGELOG" > release-notes.md
          
          # Output for GitHub release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Changelog generated successfully"

      - name: Build README files
        run: |
          echo "📚 Building modular README files for NPM..."
          npm run build:readme
          echo "✅ README files built successfully"
          
          # Show the generated README size for NPM
          if [ -f "README.npm.md" ]; then
            SIZE=$(stat -f%z "README.npm.md" 2>/dev/null || stat -c%s "README.npm.md" 2>/dev/null || echo "unknown")
            echo "📦 README.npm.md size: $SIZE bytes"
          fi

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            package.json
            package-lock.json
            README.md
            LICENSE
            CHANGELOG.md

      - name: Notify success
        if: success()
        shell: bash
        run: |
          echo "✅ Successfully released version ${GITHUB_REF#refs/tags/} to NPM!"
          echo "📦 View on NPM: https://www.npmjs.com/package/@dollhousemcp/mcp-server"
          echo "🎉 View on GitHub: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"

      - name: Trigger documentation update
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Trigger any documentation workflows if needed
            console.log('Release completed successfully');