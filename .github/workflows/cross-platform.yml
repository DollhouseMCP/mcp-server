name: Cross-Platform Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Manual trigger
  schedule:
    # Weekly compatibility check (Sundays at 2 AM UTC)
    - cron: '0 2 * * 0'

env:
  # Test configuration
  NODE_OPTIONS: --max-old-space-size=4096
  CI: true

jobs:
  # Matrix strategy for comprehensive platform coverage
  cross-platform-test:
    name: Test on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    strategy:
      fail-fast: false  # Continue testing other platforms even if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x', '22.x']
        include:
          # Platform-specific configurations
          - os: ubuntu-latest
            platform: linux
            shell: bash
          - os: windows-latest  
            platform: windows
            shell: pwsh
          - os: macos-latest
            platform: macos
            shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1  # Shallow clone for faster CI

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af  # v4.1.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # Platform detection and system info
      - name: Display system information
        shell: ${{ matrix.shell }}
        run: |
          echo "🖥️ System Information for ${{ matrix.platform }}"
          echo "=================================="
          echo "OS: ${{ matrix.os }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Shell: ${{ matrix.shell }}"
          echo "Node.js: ${{ matrix.node-version }}"
          echo "Runner: ${{ runner.os }}"
          echo "=================================="

      - name: Display system information (Windows details)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "Windows Version: $((Get-CimInstance Win32_OperatingSystem).Caption)"
          Write-Output "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Output "Architecture: $env:PROCESSOR_ARCHITECTURE"

      - name: Display system information (Unix details) 
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          echo "Kernel: $(uname -srm)"
          echo "Shell: $SHELL"
          echo "User: $(whoami)"

      # Dependency verification with enhanced version checking
      - name: Verify dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "🔍 Verifying system dependencies..."
          
          # Check Node.js
          $nodeVersion = node --version
          Write-Output "✅ Node.js: $nodeVersion"
          
          # Check npm
          $npmVersion = npm --version
          Write-Output "✅ npm: $npmVersion"
          
          # Check git
          try {
            $gitVersion = git --version
            Write-Output "✅ git: $gitVersion"
          } catch {
            Write-Output "❌ git not found"
            exit 1
          }

      - name: Verify dependencies (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          echo "🔍 Verifying system dependencies..."
          
          # Check Node.js
          echo "✅ Node.js: $(node --version)"
          
          # Check npm  
          echo "✅ npm: $(npm --version)"
          
          # Check git
          if command -v git &> /dev/null; then
            echo "✅ git: $(git --version)"
          else
            echo "❌ git not found"
            exit 1
          fi

      # Install dependencies
      - name: Install dependencies
        shell: bash  # npm works the same on all platforms
        run: |
          echo "📦 Installing dependencies..."
          npm ci
          echo "✅ Dependencies installed successfully"

      # Build the project
      - name: Build project
        shell: bash  # tsc works the same on all platforms
        run: |
          echo "🔨 Building TypeScript project..."
          npm run build
          echo "✅ Build completed successfully"

      # Verify build artifacts
      - name: Verify build artifacts (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "🔍 Verifying build artifacts..."
          if (Test-Path "dist/index.js") { Write-Output "✅ dist/index.js exists" } else { Write-Output "❌ Missing dist/index.js"; exit 1 }
          if (Test-Path "dist/index.d.ts") { Write-Output "✅ dist/index.d.ts exists" } else { Write-Output "❌ Missing dist/index.d.ts"; exit 1 }
          
      - name: Verify build artifacts (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          echo "🔍 Verifying build artifacts..."
          [ -f "dist/index.js" ] && echo "✅ dist/index.js exists" || { echo "❌ Missing dist/index.js"; exit 1; }
          [ -f "dist/index.d.ts" ] && echo "✅ dist/index.d.ts exists" || { echo "❌ Missing dist/index.d.ts"; exit 1; }

      # Test MCP server startup
      - name: Test MCP server startup (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        timeout-minutes: 2
        run: |
          Write-Output "🚀 Testing MCP server startup..."
          
          # Start server in background and test startup
          $job = Start-Job -ScriptBlock { 
            node dist/index.js 2>&1 | ForEach-Object { 
              if ($_ -match "Server running|MCP server|tools.*registered") { 
                Write-Output "SUCCESS: $_"
                return
              }
            }
          }
          
          # Wait for startup or timeout
          $timeout = 30
          $elapsed = 0
          $success = $false
          
          while ($elapsed -lt $timeout -and -not $success) {
            Start-Sleep -Seconds 1
            $elapsed++
            $output = Receive-Job -Job $job -ErrorAction SilentlyContinue
            if ($output -match "SUCCESS:") {
              Write-Output "✅ MCP server started successfully"
              $success = $true
            }
          }
          
          Stop-Job -Job $job -ErrorAction SilentlyContinue
          Remove-Job -Job $job -ErrorAction SilentlyContinue
          
          if (-not $success) {
            Write-Output "❌ MCP server failed to start within ${timeout}s"
            exit 1
          }

      - name: Test MCP server startup (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        timeout-minutes: 2
        run: |
          echo "🚀 Testing MCP server startup..."
          
          # Start server in background
          timeout 30s node dist/index.js > server.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for startup indicators
          for i in {1..30}; do
            if grep -q "Server running\|MCP server\|tools.*registered" server.log 2>/dev/null; then
              echo "✅ MCP server started successfully"
              kill $SERVER_PID 2>/dev/null || true
              exit 0
            fi
            sleep 1
          done
          
          echo "❌ MCP server failed to start within 30s"
          echo "Server log:"
          cat server.log 2>/dev/null || echo "No log file generated"
          kill $SERVER_PID 2>/dev/null || true
          exit 1

      # Test personas directory
      - name: Test personas directory (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "📁 Testing personas directory..."
          if (Test-Path "personas") { 
            Write-Output "✅ Personas directory exists"
            Get-ChildItem -Path "personas" -Filter "*.md" | ForEach-Object { Write-Output "📄 Found: $($_.Name)" }
          } else { 
            Write-Output "❌ Personas directory missing"
            exit 1 
          }

      - name: Test personas directory (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          echo "📁 Testing personas directory..."
          if [ -d "personas" ]; then
            echo "✅ Personas directory exists"
            find personas -name "*.md" -type f | while read file; do echo "📄 Found: $(basename "$file")"; done
          else
            echo "❌ Personas directory missing"
            exit 1
          fi

      # Test package.json integrity
      - name: Test package.json integrity (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "📋 Testing package.json integrity..."
          try {
            $pkg = Get-Content package.json | ConvertFrom-Json
            if ($pkg.name -eq "dollhousemcp") { Write-Output "✅ Package name correct" } else { Write-Output "❌ Invalid package name: $($pkg.name)"; exit 1 }
            if ($pkg.main -eq "dist/index.js") { Write-Output "✅ Main entry correct" } else { Write-Output "❌ Invalid main entry: $($pkg.main)"; exit 1 }
          } catch {
            Write-Output "❌ Failed to parse package.json: $_"
            exit 1
          }
          
      - name: Test package.json integrity (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          echo "📋 Testing package.json integrity..."
          # Robust JSON parsing with error handling
          if ! NAME=$(node -p "require('./package.json').name" 2>/dev/null); then
            echo "❌ Failed to parse package.json name"; exit 1
          fi
          if ! MAIN=$(node -p "require('./package.json').main" 2>/dev/null); then
            echo "❌ Failed to parse package.json main"; exit 1
          fi
          [ "$NAME" = "dollhousemcp" ] && echo "✅ Package name correct" || { echo "❌ Invalid package name: $NAME"; exit 1; }
          [ "$MAIN" = "dist/index.js" ] && echo "✅ Main entry correct" || { echo "❌ Invalid main entry: $MAIN"; exit 1; }

      # Run tests
      - name: Run test suite
        shell: bash  # Jest works the same on all platforms
        run: |
          echo "🧪 Running test suite..."
          npm test
          echo "✅ All tests passed"

      # Platform-specific additional tests
      - name: Platform-specific tests (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "🔧 Running Windows-specific tests..."
          Write-Output "✅ Windows PowerShell syntax working correctly"
          Write-Output "✅ Windows file operations functional"

      - name: Platform-specific tests (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          echo "🔧 Running Unix-specific tests..."
          echo "✅ Bash syntax working correctly"
          echo "✅ Unix file operations functional"

      # Final validation
      - name: Final validation
        shell: bash  # Final summary works on all platforms
        run: |
          echo "🎉 Cross-platform testing completed successfully!"
          echo "Platform: ${{ matrix.platform }}"
          echo "Node.js: ${{ matrix.node-version }}"
          echo "All checks passed ✅"