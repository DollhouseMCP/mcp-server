---
name: Docker Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_OPTIONS: --max-old-space-size=4096
  CI: true

jobs:
  docker-build-test:
    name: Docker Build & Test (${{ matrix.platform }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ runner.os }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            docker-buildx-${{ runner.os }}-${{ matrix.platform }}-
            docker-buildx-${{ runner.os }}-

      - name: Build Docker image (builder stage)
        # Use bash for cross-platform compatibility (Windows/macOS/Linux)
        shell: bash
        run: |
          echo "🔨 Building Docker image for ${{ matrix.platform }}..."
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target builder \
            --tag dollhousemcp:builder-${PLATFORM_TAG} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .

      - name: Build Docker image (production stage)
        shell: bash
        run: |
          echo "🏗️ Building production Docker image for ${{ matrix.platform }}..."
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target production \
            --tag dollhousemcp:latest-${PLATFORM_TAG} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .

      - name: Scan Docker image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: dollhousemcp:latest-linux-amd64
          fail-build: false  # Don't fail build on vulnerabilities, just report
          severity-cutoff: high
        continue-on-error: true
        if: matrix.platform == 'linux/amd64'  # Only scan one platform to avoid duplication

      - name: Test MCP server initialization (with security constraints)
        shell: bash
        run: |
          echo "🚀 Testing MCP server initialization for ${{ matrix.platform }}..."
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          
          # Run MCP server with security constraints and capture output directly
          echo "⏳ Running MCP server with security constraints..."
          docker_output=$(docker run \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp \
            --memory 512m \
            --cpus 0.5 \
            dollhousemcp:latest-${PLATFORM_TAG} 2>&1)
          exit_code=$?
          
          echo "Docker run completed with exit code: $exit_code"
          echo "Output captured:"
          echo "$docker_output"
          
          # MCP servers typically output to stderr and may exit with code 0 after initialization
          # Check for successful initialization in the captured output (stderr is redirected to stdout with 2>&1)
          if echo "$docker_output" | grep -q "DollhouseMCP server running on stdio"; then
            echo "✅ MCP server initialized successfully"
          elif echo "$docker_output" | grep -q "Loaded persona:"; then
            echo "✅ MCP server loaded personas (alternative success indicator)"
          else
            echo "⚠️ Did not find expected initialization message"
            echo "However, MCP servers often exit immediately after setup, which is normal"
            # Don't fail here - check for errors instead
            if echo "$docker_output" | grep -qi "error\|exception\|failed to"; then
              echo "❌ Found errors in output"
              exit 1
            else
              echo "✅ No errors found, assuming successful initialization"
            fi
          fi

      - name: Test MCP server functionality
        shell: bash
        run: |
          echo "🔍 Testing MCP server functionality for ${{ matrix.platform }}..."
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          
          # Run MCP server again to test functionality
          echo "⏳ Running MCP server again for functionality testing..."
          docker_output=$(docker run \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp \
            --memory 512m \
            --cpus 0.5 \
            dollhousemcp:latest-${PLATFORM_TAG} 2>&1)
          
          # Test persona loading
          if echo "$docker_output" | grep -q "Loaded persona:"; then
            echo "✅ MCP server loaded personas successfully"
            persona_count=$(echo "$docker_output" | grep -c "Loaded persona:" || echo "0")
            echo "📊 Loaded $persona_count personas"
          else
            echo "❌ MCP server failed to load personas"
            echo "Output was:"
            echo "$docker_output"
            exit 1
          fi
          
          # Verify no critical errors during initialization
          if echo "$docker_output" | grep -i "error\|failed\|exception"; then
            echo "❌ Critical errors found during MCP server initialization"
            echo "Error output:"
            echo "$docker_output"
            exit 1
          else
            echo "✅ No critical errors during initialization"
          fi


      - name: Cleanup containers
        if: always()
        run: |
          echo "🧹 Cleaning up any dangling containers..."
          docker system prune -f --volumes || true

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Docker testing complete
        run: |
          echo "✅ Docker Testing Complete for ${{ matrix.platform }}!"
          echo "Platform: ${{ matrix.platform }}"
          echo "All tests passed successfully"

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Test Docker Compose build
        shell: bash
        run: |
          echo "🐳 Testing Docker Compose build..."
          docker compose build dollhousemcp

      - name: Test Docker Compose startup
        shell: bash
        run: |
          echo "🚀 Testing Docker Compose startup..."
          
          # Run MCP server and capture logs directly (MCP servers exit after initialization)
          echo "⏳ Running MCP server via Docker Compose..."
          docker_output=$(docker compose run --rm dollhousemcp 2>&1 || true)
          exit_code=$?
          
          echo "Docker Compose run completed with exit code: $exit_code"
          echo "Output captured:"
          echo "$docker_output"
          
          # MCP servers typically output to stderr and may exit with code 0 after initialization
          # Check for successful initialization in the captured output (stderr is redirected to stdout with 2>&1)
          if echo "$docker_output" | grep -q "DollhouseMCP server running on stdio"; then
            echo "✅ Docker Compose MCP server initialized successfully"
          elif echo "$docker_output" | grep -q "Loaded persona:"; then
            echo "✅ Docker Compose MCP server loaded personas (alternative success indicator)"
          else
            echo "⚠️ Did not find expected initialization message"
            echo "However, MCP servers often exit immediately after setup, which is normal"
            # Don't fail here - check for errors instead
            if echo "$docker_output" | grep -qi "error\|exception\|failed to"; then
              echo "❌ Found errors in output"
              exit 1
            else
              echo "✅ No errors found, assuming successful initialization"
            fi
          fi

      - name: Test Docker Compose functionality
        shell: bash
        run: |
          echo "🔍 Testing Docker Compose MCP server functionality..."
          
          # Run MCP server again to capture output for functionality testing
          echo "⏳ Running MCP server again for functionality testing..."
          docker_output=$(docker compose run --rm dollhousemcp 2>&1)
          
          # Test that server can load personas and initialize properly
          echo "Testing MCP server persona loading..."
          
          if echo "$docker_output" | grep -q "Loaded persona:"; then
            echo "✅ MCP server loaded personas successfully"
            persona_count=$(echo "$docker_output" | grep -c "Loaded persona:" || echo "0")
            echo "📊 Loaded $persona_count personas"
          else
            echo "❌ MCP server failed to load personas"
            echo "Output was:"
            echo "$docker_output"
            exit 1
          fi
          
          # Verify no critical errors during initialization
          if echo "$docker_output" | grep -i "error\|failed\|exception"; then
            echo "❌ Critical errors found during MCP server initialization"
            echo "Error output:"
            echo "$docker_output"
            exit 1
          else
            echo "✅ No critical errors during initialization"
          fi

      - name: Cleanup Docker Compose
        if: always()
        run: |
          echo "🧹 Cleaning up Docker Compose..."
          docker compose down
          docker compose rm -f

      - name: Docker Compose testing complete
        run: |
          echo "✅ Docker Compose Testing Complete!"
          echo "All tests passed successfully"