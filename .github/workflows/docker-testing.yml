---
name: Docker Testing
# Uses native ARM64 runners (ubuntu-24.04-arm) for ARM64 builds to eliminate QEMU emulation overhead
# AMD64 builds use ubuntu-latest, ARM64 builds use native ARM64 hardware
# This eliminates the 10-22x performance penalty of QEMU emulation for TypeScript compilation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

env:
  NODE_OPTIONS: --max-old-space-size=4096
  CI: true
  TEST_PERSONAS_DIR: ${{ github.workspace }}/test-personas
  # Enhanced debugging environment variables
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  docker-build-test:
    name: Docker Build & Test (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm

    steps:
      - name: üöÄ Session Start - Log System Information
        shell: bash
        run: |
          echo "======================================"
          echo "üîç CI ENVIRONMENT DIAGNOSTIC SESSION"
          echo "======================================"
          echo "‚è∞ Session Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìç Platform Target: ${{ matrix.platform }}"
          echo "üñ•Ô∏è Runner OS: ${{ runner.os }}"
          echo "üèóÔ∏è Runner Architecture: ${{ runner.arch }}"
          echo "üéØ Runner Type: ${{ matrix.runner }}"
          echo "üì¶ Workflow: ${{ github.workflow }}"
          echo "üîÑ Run ID: ${{ github.run_id }}"
          if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
            echo "üöÄ ARM64: Using NATIVE runner (no QEMU emulation)"
          else
            echo "üöÄ AMD64: Using standard runner"
          fi
          echo "======================================"
          
          echo "\nüñ•Ô∏è SYSTEM RESOURCES:"
          echo "CPU Info:"
          nproc || echo "nproc not available"
          cat /proc/cpuinfo | grep -E 'processor|model name|cpu cores' | head -10 || echo "CPU info not available"
          echo "\nMemory Info:"
          free -h || echo "free command not available"
          echo "\nDisk Space:"
          df -h / || echo "df command not available"
          echo "\nLoad Average:"
          uptime || echo "uptime not available"
          
          echo "\nüê≥ DOCKER ENVIRONMENT:"
          echo "Docker Version:"
          docker --version || echo "Docker not found"
          echo "Docker Info:"
          docker info | head -20 || echo "Docker info failed"
          echo "Docker System Status:"
          docker system df || echo "Docker system df failed"
          
          echo "\nüåê NETWORK & CONNECTIVITY:"
          echo "Checking network connectivity..."
          ping -c 2 8.8.8.8 || echo "Network connectivity test failed"
          
          echo "======================================"
          echo "‚è∞ System Info Complete: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "======================================"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üîß Set up QEMU (AMD64 only - ARM64 uses native runner)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64
        if: matrix.platform == 'linux/amd64'

      - name: üîß Set up Docker Buildx (with diagnostics)
        shell: bash
        run: |
          echo "======================================"
          echo "‚è∞ Buildx Setup Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìç Target Platform: ${{ matrix.platform }}"
          echo "======================================"
          
          echo "\nüîç Pre-Buildx Docker State:"
          docker version || echo "Docker version failed"
          docker buildx version || echo "Buildx not available"
          docker buildx ls || echo "No buildx instances"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
          
      - name: üîç Buildx Post-Setup Diagnostics
        shell: bash
        run: |
          echo "\nüîç Post-Buildx Docker State:"
          echo "Buildx instances:"
          docker buildx ls
          echo "\nCurrent builder info:"
          docker buildx inspect
          echo "\nSupported platforms:"
          docker buildx inspect | grep -A 10 "Platforms:" || echo "Platform info not available"
          
          echo "\nüß™ Platform Test:"
          echo "Testing basic platform compatibility..."
          docker buildx build --platform ${{ matrix.platform }} - <<< 'FROM alpine:latest' || echo "Platform test failed"
          
          echo "======================================"
          echo "‚è∞ Buildx Setup Complete: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "======================================"

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ runner.os }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            docker-buildx-${{ runner.os }}-${{ matrix.platform }}-
            docker-buildx-${{ runner.os }}-

      - name: üî® Build Docker image (builder stage) - VERBOSE
        shell: bash
        run: |
          echo "======================================"
          echo "‚è∞ Builder Stage Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìç Platform: ${{ matrix.platform }}"
          echo "======================================"
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "üè∑Ô∏è Platform Tag: ${PLATFORM_TAG}"
          
          echo "\nüîç Pre-Build Environment:"
          echo "Working Directory: $(pwd)"
          echo "Available Memory: $(free -h | grep Mem || echo 'Memory info unavailable')"
          echo "Docker Status: $(docker system df || echo 'Docker df failed')"
          echo "Build Context Size:"
          du -sh . || echo "Size calculation failed"
          
          echo "\nüèóÔ∏è Starting Docker Build with VERBOSE output..."
          echo "Command: docker buildx build --platform ${{ matrix.platform }} --target builder --progress=plain"
          
          # Store start time
          BUILD_START=$(date +%s)
          echo "‚è∞ Build Start Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Run build with verbose output and error handling
          set +e  # Don't exit on error, we want to capture it
          
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target builder \
            --tag dollhousemcp:builder-${PLATFORM_TAG} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --progress=plain \
            --load \
            --file docker/Dockerfile \
            . 2>&1 | tee /tmp/build-output.log
          
          BUILD_EXIT_CODE=$?
          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          
          echo "\n======================================"
          echo "‚è∞ Build End Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚è±Ô∏è Build Duration: ${BUILD_DURATION} seconds"
          echo "üîÑ Exit Code: ${BUILD_EXIT_CODE}"
          echo "======================================"
          
          echo "\nüîç Post-Build Analysis:"
          echo "Final 50 lines of build output:"
          tail -50 /tmp/build-output.log || echo "Could not read build log"
          
          echo "\nDocker Images After Build:"
          docker images | grep dollhousemcp || echo "No dollhousemcp images found"
          
          echo "\nSystem Resources After Build:"
          free -h | grep Mem || echo "Memory info unavailable"
          docker system df || echo "Docker df failed"
          
          # Exit with the actual build exit code
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "‚ùå BUILDER STAGE FAILED!"
            echo "Full build log contents:"
            cat /tmp/build-output.log || echo "Could not read full build log"
            exit $BUILD_EXIT_CODE
          else
            echo "‚úÖ Builder stage completed successfully"
          fi
          
          set -e  # Re-enable exit on error

      - name: üèóÔ∏è Build Docker image (production stage) - VERBOSE
        shell: bash
        run: |
          echo "======================================"
          echo "‚è∞ Production Stage Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìç Platform: ${{ matrix.platform }}"
          echo "======================================"
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "üè∑Ô∏è Platform Tag: ${PLATFORM_TAG}"
          
          echo "\nüîç Pre-Production Build State:"
          echo "Available Images:"
          docker images | grep dollhousemcp || echo "No dollhousemcp images found"
          echo "Available Memory: $(free -h | grep Mem || echo 'Memory info unavailable')"
          echo "Docker Status: $(docker system df || echo 'Docker df failed')"
          
          # Store start time
          PROD_START=$(date +%s)
          echo "‚è∞ Production Build Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Run production build with verbose output
          set +e  # Don't exit on error, we want to capture it
          
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target production \
            --tag dollhousemcp:latest-${PLATFORM_TAG} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --progress=plain \
            --load \
            --file docker/Dockerfile \
            . 2>&1 | tee /tmp/prod-build-output.log
          
          PROD_EXIT_CODE=$?
          PROD_END=$(date +%s)
          PROD_DURATION=$((PROD_END - PROD_START))
          
          echo "\n======================================"
          echo "‚è∞ Production Build End: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚è±Ô∏è Production Duration: ${PROD_DURATION} seconds"
          echo "üîÑ Exit Code: ${PROD_EXIT_CODE}"
          echo "======================================"
          
          echo "\nüîç Post-Production Analysis:"
          echo "Final production images:"
          docker images | grep dollhousemcp || echo "No dollhousemcp images found"
          
          echo "\nImage layers and size:"
          docker history dollhousemcp:latest-${PLATFORM_TAG} || echo "Could not inspect image history"
          
          # Exit with the actual build exit code
          if [ $PROD_EXIT_CODE -ne 0 ]; then
            echo "‚ùå PRODUCTION STAGE FAILED!"
            echo "Full production build log:"
            cat /tmp/prod-build-output.log || echo "Could not read production build log"
            exit $PROD_EXIT_CODE
          else
            echo "‚úÖ Production stage completed successfully"
          fi
          
          set -e  # Re-enable exit on error

      - name: Scan Docker image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: dollhousemcp:latest-linux-amd64
          fail-build: false  # Don't fail build on vulnerabilities, just report
          severity-cutoff: high
        continue-on-error: true
        if: matrix.platform == 'linux/amd64'  # Only scan AMD64 to save time on ARM64 builds

      - name: üöÄ Test MCP server initialization - ULTRA VERBOSE
        shell: bash
        run: |
          echo "========================================="
          echo "‚è∞ MCP Test Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìç Platform: ${{ matrix.platform }}"
          echo "üéØ Test: MCP Server Initialization"
          echo "========================================="
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "üè∑Ô∏è Platform Tag: ${PLATFORM_TAG}"
          
          echo "\nüîç Pre-Test Environment Check:"
          echo "Available Images:"
          docker images | grep dollhousemcp || echo "No dollhousemcp images found - THIS IS A PROBLEM!"
          echo "\nSystem Resources:"
          free -h | grep Mem || echo "Memory info unavailable"
          echo "Available CPU: $(nproc || echo 'nproc unavailable')"
          echo "Load Average: $(uptime || echo 'uptime unavailable')"
          
          echo "\nüß™ Container Preparation Test:"
          echo "Testing basic container creation for platform ${{ matrix.platform }}..."
          docker run --rm --platform ${{ matrix.platform }} dollhousemcp:latest-${PLATFORM_TAG} echo "Container creation test passed" || {
            echo "‚ùå CRITICAL: Cannot create basic container for platform ${{ matrix.platform }}!"
            echo "This indicates a fundamental platform compatibility issue."
            exit 1
          }
          
          echo "\nüìù Constructing MCP Test Command:"
          MCP_JSON_REQUEST='{"jsonrpc":"2.0","method":"initialize","params":{"protocolVersion":"1.0.0","capabilities":{},"clientInfo":{"name":"test","version":"1.0.0"}},"id":1}'
          echo "JSON Request: $MCP_JSON_REQUEST"
          
          DOCKER_CMD="docker run -i \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp:noexec,nosuid,mode=1777 \
            --tmpfs /app/tmp:noexec,nosuid,mode=1777 \
            --memory 512m \
            --cpus 0.5 \
            --env DOLLHOUSE_PORTFOLIO_DIR=/app/tmp/portfolio \
            --env DOLLHOUSE_CACHE_DIR=/app/tmp/cache \
            dollhousemcp:latest-${PLATFORM_TAG}"
          
          echo "\nDocker Command: $DOCKER_CMD"
          
          echo "\n‚è∞ Starting MCP Test with Platform-Specific Timeout:"
          if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
            TIMEOUT_DURATION=10
            echo "üöÄ ARM64 Platform: Using native ARM64 runner, timeout of ${TIMEOUT_DURATION}s"
          else
            TIMEOUT_DURATION=5
            echo "üöÄ AMD64 Platform: Using standard timeout of ${TIMEOUT_DURATION}s"
          fi
          
          # Store test start time
          TEST_START=$(date +%s)
          echo "‚è∞ Test Start Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Run the test with comprehensive error capture
          set +e  # Don't exit on error, we want to analyze it
          
          echo "\nüîÑ Executing MCP Server Test..."
          docker_output=$(timeout $TIMEOUT_DURATION sh -c "echo '$MCP_JSON_REQUEST' | $DOCKER_CMD 2>&1" || true)
          test_exit_code=$?
          
          TEST_END=$(date +%s)
          TEST_DURATION=$((TEST_END - TEST_START))
          
          echo "\n========================================="
          echo "‚è∞ Test End Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚è±Ô∏è Test Duration: ${TEST_DURATION} seconds (timeout was ${TIMEOUT_DURATION}s)"
          echo "üîÑ Exit Code: ${test_exit_code}"
          echo "========================================="
          
          echo "\nüìä DETAILED OUTPUT ANALYSIS:"
          echo "Raw output length: ${#docker_output} characters"
          
          if [ -z "$docker_output" ]; then
            echo "‚ùå CRITICAL: No output captured at all!"
            echo "This suggests the container failed to start or produce any output."
          else
            echo "‚úÖ Output captured, analyzing content..."
            echo "\nüìã FULL RAW OUTPUT:"
            echo "--- BEGIN OUTPUT ---"
            echo "$docker_output"
            echo "--- END OUTPUT ---"
          fi
          
          echo "\nüîç PLATFORM-SPECIFIC ANALYSIS:"
          if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
            echo "üöÄ ARM64 Analysis:"
            echo "- Running on native ARM64 runner (ubuntu-24.04-arm)"
            echo "- No QEMU emulation overhead"
            echo "- Expected native performance"
            echo "- Timeout duration: ${TIMEOUT_DURATION}s"
            echo "- Actual duration: ${TEST_DURATION}s"
            
            if [ $TEST_DURATION -ge $TIMEOUT_DURATION ]; then
              echo "‚ö†Ô∏è Test hit timeout limit - investigate performance issue!"
            else
              echo "‚úÖ Test completed within timeout window"
            fi
          else
            echo "üöÄ AMD64 Analysis:"
            echo "- Running natively on x86_64"
            echo "- Expected fast performance"
            echo "- Duration: ${TEST_DURATION}s"
          fi
          
          echo "\nüß™ JSON-RPC RESPONSE VALIDATION:"
          if echo "$docker_output" | grep -q '"jsonrpc":"2.0".*"id":1'; then
            echo "‚úÖ Valid JSON-RPC response structure found"
            
            if echo "$docker_output" | grep -q '"serverInfo":{"name":"dollhousemcp"'; then
              echo "‚úÖ Correct serverInfo found - MCP server is working properly"
              echo "\nüéâ TEST PASSED FOR ${{ matrix.platform }}!"
            else
              echo "‚ö†Ô∏è JSON-RPC response found but missing expected serverInfo"
              echo "Response may be incomplete or malformed"
            fi
          else
            echo "‚ùå FAILED: No valid JSON-RPC response found"
            echo "\nüîç FAILURE ANALYSIS:"
            
            # Check for common failure patterns
            if echo "$docker_output" | grep -qi "error\|failed\|exception"; then
              echo "üî• Error messages found in output:"
              echo "$docker_output" | grep -i "error\|failed\|exception" || echo "Could not extract error messages"
            fi
            
            if echo "$docker_output" | grep -qi "timeout\|killed"; then
              echo "‚è∞ Timeout-related messages:"
              echo "$docker_output" | grep -i "timeout\|killed" || echo "Could not extract timeout messages"
            fi
            
            if [ $test_exit_code -eq 124 ]; then
              echo "‚è∞ TIMEOUT CONFIRMED: Test was killed by timeout command"
              echo "This means the server took longer than ${TIMEOUT_DURATION}s to respond"
              if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
                echo "üí° NOTE: Running on native ARM64 - timeout should not be due to emulation"
              fi
            elif [ $test_exit_code -ne 0 ]; then
              echo "üí• NON-ZERO EXIT: Docker command failed with code $test_exit_code"
            fi
            
            echo "\n‚ùå MCP SERVER TEST FAILED FOR ${{ matrix.platform }}"
            set -e
            exit 1
          fi
          
          set -e  # Re-enable exit on error
          echo "\n========================================="
          echo "‚úÖ MCP INITIALIZATION TEST COMPLETED SUCCESSFULLY"
          echo "Platform: ${{ matrix.platform }}"
          echo "Duration: ${TEST_DURATION}s"
          echo "========================================="

      - name: üîç Test MCP server with tools/list command - VERBOSE
        shell: bash
        run: |
          echo "========================================="
          echo "‚è∞ Tools/List Test Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìç Platform: ${{ matrix.platform }}"
          echo "üéØ Test: MCP Server Tools/List Functionality"
          echo "========================================="
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "üè∑Ô∏è Platform Tag: ${PLATFORM_TAG}"
          
          echo "\nüìù Constructing Tools/List Test Command:"
          TOOLS_JSON_REQUEST='{"jsonrpc":"2.0","method":"tools/list","params":{},"id":2}'
          echo "JSON Request: $TOOLS_JSON_REQUEST"
          
          echo "\n‚è∞ Starting Tools/List Test with Platform-Specific Timeout:"
          if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
            TIMEOUT_DURATION=10
            echo "üöÄ ARM64 Platform: Using native ARM64 runner, timeout of ${TIMEOUT_DURATION}s"
          else
            TIMEOUT_DURATION=5
            echo "üöÄ AMD64 Platform: Using standard timeout of ${TIMEOUT_DURATION}s"
          fi
          
          # Store test start time
          TOOLS_START=$(date +%s)
          echo "‚è∞ Tools Test Start Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Run the tools/list test
          set +e  # Don't exit on error, we want to analyze it
          
          echo "\nüîÑ Executing Tools/List Test..."
          docker_output=$(timeout $TIMEOUT_DURATION sh -c "echo '$TOOLS_JSON_REQUEST' | \
            docker run -i \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp:noexec,nosuid,mode=1777 \
            --tmpfs /app/tmp:noexec,nosuid,mode=1777 \
            --memory 512m \
            --cpus 0.5 \
            --env DOLLHOUSE_PORTFOLIO_DIR=/app/tmp/portfolio \
            --env DOLLHOUSE_CACHE_DIR=/app/tmp/cache \
            dollhousemcp:latest-${PLATFORM_TAG} 2>&1" || true)
          
          tools_exit_code=$?
          TOOLS_END=$(date +%s)
          TOOLS_DURATION=$((TOOLS_END - TOOLS_START))
          
          echo "\n========================================="
          echo "‚è∞ Tools Test End Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚è±Ô∏è Tools Test Duration: ${TOOLS_DURATION} seconds"
          echo "üîÑ Exit Code: ${tools_exit_code}"
          echo "========================================="
          
          echo "\nüìã TOOLS/LIST OUTPUT:"
          echo "--- BEGIN OUTPUT ---"
          echo "$docker_output"
          echo "--- END OUTPUT ---"
          
          echo "\nüß™ JSON-RPC RESPONSE VALIDATION:"
          if echo "$docker_output" | grep -q '"jsonrpc":"2.0".*"id":2'; then
            echo "‚úÖ Valid JSON-RPC response structure found for tools/list"
            
            if echo "$docker_output" | grep -q '"result"'; then
              echo "‚úÖ Response contains result field - server is fully functional"
              echo "\nüéâ TOOLS/LIST TEST PASSED FOR ${{ matrix.platform }}!"
            else
              echo "‚ö†Ô∏è JSON-RPC response found but missing result field"
              echo "Response may be incomplete"
            fi
          else
            echo "‚ùå FAILED: No valid JSON-RPC response found for tools/list"
            echo "\nüîç TOOLS/LIST FAILURE ANALYSIS:"
            
            if [ $tools_exit_code -eq 124 ]; then
              echo "‚è∞ TIMEOUT: Tools/list test was killed by timeout"
              echo "Duration: ${TOOLS_DURATION}s (limit: ${TIMEOUT_DURATION}s)"
            else
              echo "üí• Command failed with exit code: $tools_exit_code"
            fi
            
            echo "\n‚ùå TOOLS/LIST TEST FAILED FOR ${{ matrix.platform }}"
            set -e
            exit 1
          fi
          
          set -e  # Re-enable exit on error
          echo "\n========================================="
          echo "‚úÖ TOOLS/LIST TEST COMPLETED SUCCESSFULLY"
          echo "Platform: ${{ matrix.platform }}"
          echo "Duration: ${TOOLS_DURATION}s"
          echo "========================================="


      - name: Cleanup containers
        if: always()
        shell: bash
        run: |
          echo "üßπ Cleaning up any dangling containers..."
          docker system prune -f --volumes || true

      - name: Move cache
        if: always()
        shell: bash
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Docker testing complete
        shell: bash
        run: |
          echo "‚úÖ Docker Testing Complete for ${{ matrix.platform }}!"
          echo "Platform: ${{ matrix.platform }}"
          echo "All tests passed successfully"

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1


      - name: Test MINIMAL Docker Compose (hello world test)
        shell: bash
        run: |
          echo "üß™ Testing MINIMAL Docker Compose to verify Docker works at all..."
          echo "This should just echo 'Hello' and exit successfully"
          docker compose --file docker/docker-compose.minimal.yml build minimal-test
          docker compose --file docker/docker-compose.minimal.yml run --rm minimal-test
          echo "‚úÖ Minimal Docker test passed!"
          
      - name: Test Docker Compose build
        shell: bash
        run: |
          echo "üê≥ Testing Docker Compose build..."
          echo "üìÅ Verifying directory structure before Docker build:"
          echo "Current directory: $(pwd)"
          echo "Checking if src/ exists:"
          ls -la src/ | head -5 || echo "src/ directory not found!"
          echo "Checking docker/ directory:"
          ls -la docker/ || echo "docker/ directory not found!"
          echo "Using docker-compose.yml with proper tmpfs permissions"
          # Build using the regular Dockerfile which compiles TypeScript inside Docker
          docker compose --file docker/docker-compose.yml build dollhousemcp

      - name: Test Docker Compose startup
        shell: bash
        run: |
          echo "üöÄ Testing Docker Compose startup..."
          
          # Run MCP server with initialize command via Docker Compose
          echo "‚è≥ Running MCP server via Docker Compose with initialize command..."
          # Portfolio directory is already set to /app/tmp/portfolio in docker-compose.yml
          # Use timeout since MCP server runs indefinitely
          docker_output=$(timeout 5 sh -c 'echo '"'"'{"jsonrpc":"2.0","method":"initialize","params":{"protocolVersion":"1.0.0","capabilities":{},"clientInfo":{"name":"test","version":"1.0.0"}},"id":1}'"'"' | docker compose --file docker/docker-compose.yml run --rm -T dollhousemcp 2>&1' || true)
          exit_code=$?
          
          echo "Docker Compose run completed with exit code: $exit_code"
          echo "Output captured:"
          echo "$docker_output"
          
          # Check for successful MCP response from Docker Compose
          if echo "$docker_output" | grep -q '"jsonrpc":"2.0".*"id":1'; then
            echo "‚úÖ Docker Compose MCP server returned valid JSON-RPC response"
            if echo "$docker_output" | grep -q '"serverInfo":{"name":"dollhousemcp"'; then
              echo "‚úÖ Response contains correct serverInfo - server is working"
            fi
          else
            echo "‚ùå FAILED: Docker Compose MCP server did not return a JSON-RPC response"
            echo "The server is not responding to API calls through Docker Compose"
            exit 1
          fi

      - name: Cleanup Docker Compose
        if: always()
        run: |
          echo "üßπ Cleaning up Docker Compose..."
          docker compose --file docker/docker-compose.yml down
          docker compose --file docker/docker-compose.yml rm -f

      - name: Docker Compose testing complete
        shell: bash
        run: |
          echo "‚úÖ Docker Compose Testing Complete!"
          echo "All tests passed successfully"
