---
name: Docker Testing
# Uses native ARM64 runners for ARM64 builds to eliminate emulation overhead
# GitHub's ubuntu-24.04-arm provides native ARM64 execution for public repositories

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

env:
  NODE_OPTIONS: --max-old-space-size=4096
  CI: true
  TEST_PERSONAS_DIR: ${{ github.workspace }}/test-personas

jobs:
  docker-build-test:
    name: Docker Build & Test (${{ matrix.platform }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ runner.os }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            docker-buildx-${{ runner.os }}-${{ matrix.platform }}-
            docker-buildx-${{ runner.os }}-

      - name: Build Docker image (builder stage)
        shell: bash
        run: |
          echo "🔨 Building Docker image for ${{ matrix.platform }}..."
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target builder \
            --tag dollhousemcp:builder-${PLATFORM_TAG} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            --file docker/Dockerfile \
            .

      - name: Build Docker image (production stage)
        shell: bash
        run: |
          echo "🏗️ Building production Docker image for ${{ matrix.platform }}..."
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target production \
            --tag dollhousemcp:latest-${PLATFORM_TAG} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            --file docker/Dockerfile \
            .

      - name: Scan Docker image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: dollhousemcp:latest-linux-amd64
          fail-build: false  # Don't fail build on vulnerabilities, just report
          severity-cutoff: high
        continue-on-error: true
        if: matrix.platform == 'linux/amd64'  # Only scan AMD64 to save time on ARM64 builds

      - name: Test MCP server initialization (with security constraints)
        shell: bash
        run: |
          echo "🚀 Testing MCP server initialization for ${{ matrix.platform }} on native ${{ matrix.runner }}..."
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          
          # Run MCP server with security constraints and send initialize command
          echo "⏳ Running MCP server with initialize command..."
          # CRITICAL FIX: Set DOLLHOUSE_PORTFOLIO_DIR to writable tmpfs location
          # The default ~/.dollhouse/portfolio is read-only in Docker, causing initialization to hang
          # Use timeout to capture response since MCP server runs indefinitely
          docker_output=$(timeout 5 sh -c "echo '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"1.0.0\",\"capabilities\":{},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0.0\"}},\"id\":1}' | \
            docker run -i \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp:noexec,nosuid,mode=1777 \
            --tmpfs /app/tmp:noexec,nosuid,mode=1777 \
            --memory 512m \
            --cpus 0.5 \
            dollhousemcp:latest-${PLATFORM_TAG} 2>&1" || true)
          exit_code=$?
          
          echo "Docker run completed with exit code: $exit_code"
          echo "Output captured:"
          echo "$docker_output"
          
          # Check for successful MCP response
          # The server should return a JSON-RPC response with serverInfo
          if echo "$docker_output" | grep -q '"jsonrpc":"2.0".*"id":1'; then
            echo "✅ MCP server returned valid JSON-RPC response"
            if echo "$docker_output" | grep -q '"serverInfo":{"name":"dollhousemcp"'; then
              echo "✅ Response contains correct serverInfo"
            fi
            # Test passed - we got a proper API response
          else
            echo "❌ FAILED: MCP server did not return a JSON-RPC response"
            echo "This means the server is not responding to API calls properly"
            exit 1
          fi

      - name: Test MCP server with tools/list command
        shell: bash
        run: |
          echo "🔍 Testing MCP server tools/list functionality for ${{ matrix.platform }}..."
          
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          
          # Send tools/list command to verify server functionality
          echo "⏳ Sending tools/list command to MCP server..."
          # Use timeout since server runs indefinitely after responding
          docker_output=$(timeout 5 sh -c "echo '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"params\":{},\"id\":2}' | \
            docker run -i \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp:noexec,nosuid,mode=1777 \
            --tmpfs /app/tmp:noexec,nosuid,mode=1777 \
            --memory 512m \
            --cpus 0.5 \
            dollhousemcp:latest-${PLATFORM_TAG} 2>&1" || true)
          
          echo "Output captured:"
          echo "$docker_output"
          
          # Check for successful JSON-RPC response
          if echo "$docker_output" | grep -q '"jsonrpc":"2.0".*"id":2'; then
            echo "✅ MCP server returned valid JSON-RPC response to tools/list"
            if echo "$docker_output" | grep -q '"result"'; then
              echo "✅ Response contains result field - server is fully functional"
            fi
          else
            echo "❌ FAILED: MCP server did not return a JSON-RPC response to tools/list"
            echo "This indicates the server is not handling API requests properly"
            exit 1
          fi


      - name: Cleanup containers
        if: always()
        shell: bash
        run: |
          echo "🧹 Cleaning up any dangling containers..."
          docker system prune -f --volumes || true

      - name: Move cache
        if: always()
        shell: bash
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Docker testing complete
        shell: bash
        run: |
          echo "✅ Docker Testing Complete for ${{ matrix.platform }}!"
          echo "Platform: ${{ matrix.platform }}"
          echo "All tests passed successfully"

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1


      - name: Test MINIMAL Docker Compose (hello world test)
        shell: bash
        run: |
          echo "🧪 Testing MINIMAL Docker Compose to verify Docker works at all..."
          echo "This should just echo 'Hello' and exit successfully"
          docker compose --file docker/docker-compose.minimal.yml build minimal-test
          docker compose --file docker/docker-compose.minimal.yml run --rm minimal-test
          echo "✅ Minimal Docker test passed!"
          
      - name: Test Docker Compose build
        shell: bash
        run: |
          echo "🐳 Testing Docker Compose build..."
          echo "📁 Verifying directory structure before Docker build:"
          echo "Current directory: $(pwd)"
          echo "Checking if src/ exists:"
          ls -la src/ | head -5 || echo "src/ directory not found!"
          echo "Checking docker/ directory:"
          ls -la docker/ || echo "docker/ directory not found!"
          echo "Using docker-compose.yml with proper tmpfs permissions"
          # Build using the regular Dockerfile which compiles TypeScript inside Docker
          docker compose --file docker/docker-compose.yml build dollhousemcp

      - name: Test Docker Compose startup
        shell: bash
        run: |
          echo "🚀 Testing Docker Compose startup..."
          
          # Run MCP server with initialize command via Docker Compose
          echo "⏳ Running MCP server via Docker Compose with initialize command..."
          # Portfolio directory is already set to /app/tmp/portfolio in docker-compose.yml
          # Use timeout since MCP server runs indefinitely
          docker_output=$(timeout 5 sh -c 'echo '"'"'{"jsonrpc":"2.0","method":"initialize","params":{"protocolVersion":"1.0.0","capabilities":{},"clientInfo":{"name":"test","version":"1.0.0"}},"id":1}'"'"' | docker compose --file docker/docker-compose.yml run --rm -T dollhousemcp 2>&1' || true)
          exit_code=$?
          
          echo "Docker Compose run completed with exit code: $exit_code"
          echo "Output captured:"
          echo "$docker_output"
          
          # Check for successful MCP response from Docker Compose
          if echo "$docker_output" | grep -q '"jsonrpc":"2.0".*"id":1'; then
            echo "✅ Docker Compose MCP server returned valid JSON-RPC response"
            if echo "$docker_output" | grep -q '"serverInfo":{"name":"dollhousemcp"'; then
              echo "✅ Response contains correct serverInfo - server is working"
            fi
          else
            echo "❌ FAILED: Docker Compose MCP server did not return a JSON-RPC response"
            echo "The server is not responding to API calls through Docker Compose"
            exit 1
          fi

      - name: Cleanup Docker Compose
        if: always()
        run: |
          echo "🧹 Cleaning up Docker Compose..."
          docker compose --file docker/docker-compose.yml down
          docker compose --file docker/docker-compose.yml rm -f

      - name: Docker Compose testing complete
        shell: bash
        run: |
          echo "✅ Docker Compose Testing Complete!"
          echo "All tests passed successfully"
