---
name: Docker Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_OPTIONS: --max-old-space-size=4096
  CI: true

jobs:
  docker-build-test:
    name: Docker Build & Test (${{ matrix.platform }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ runner.os }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            docker-buildx-${{ runner.os }}-${{ matrix.platform }}-
            docker-buildx-${{ runner.os }}-

      - name: Build Docker image (builder stage)
        run: |
          echo "üî® Building Docker image for ${{ matrix.platform }}..."
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target builder \
            --tag dollhousemcp:builder-${{ matrix.platform }} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .

      - name: Build Docker image (production stage)
        run: |
          echo "üèóÔ∏è Building production Docker image for ${{ matrix.platform }}..."
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target production \
            --tag dollhousemcp:latest-${{ matrix.platform }} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .

      - name: Scan Docker image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: dollhousemcp:latest-${{ matrix.platform }}
          fail-build: false  # Don't fail build on vulnerabilities, just report
          severity-cutoff: high
        continue-on-error: true

      - name: Test MCP server initialization (with security constraints)
        run: |
          echo "üöÄ Testing MCP server initialization for ${{ matrix.platform }}..."
          
          # Run MCP server with security constraints and capture logs
          docker run \
            --name dollhousemcp-test \
            --platform ${{ matrix.platform }} \
            --user 1001:1001 \
            --security-opt no-new-privileges \
            --read-only \
            --tmpfs /tmp \
            --memory 512m \
            --cpus 0.5 \
            dollhousemcp:latest-${{ matrix.platform }} &
          
          # Wait for container to complete initialization
          echo "‚è≥ Waiting for MCP server initialization..."
          docker wait dollhousemcp-test || true
          
          # Check logs for successful initialization
          if docker logs dollhousemcp-test 2>&1 | grep -q "DollhouseMCP server running on stdio"; then
            echo "‚úÖ MCP server initialized successfully"
          else
            echo "‚ùå MCP server failed to initialize"
            docker logs dollhousemcp-test
            exit 1
          fi

      - name: Test MCP server functionality
        run: |
          echo "üîç Testing MCP server functionality for ${{ matrix.platform }}..."
          
          # Test persona loading
          if docker logs dollhousemcp-test 2>&1 | grep -q "Loaded persona:"; then
            echo "‚úÖ MCP server loaded personas successfully"
            persona_count=$(docker logs dollhousemcp-test 2>&1 | grep -c "Loaded persona:" || echo "0")
            echo "üìä Loaded $persona_count personas"
          else
            echo "‚ùå MCP server failed to load personas"
            docker logs dollhousemcp-test
            exit 1
          fi
          
          # Verify no critical errors during initialization
          if docker logs dollhousemcp-test 2>&1 | grep -i "error\|failed\|exception"; then
            echo "‚ùå Critical errors found during MCP server initialization"
            docker logs dollhousemcp-test
            exit 1
          else
            echo "‚úÖ No critical errors during initialization"
          fi


      - name: Cleanup container
        if: always()
        run: |
          echo "üßπ Cleaning up test container..."
          docker stop dollhousemcp-test || true
          docker rm dollhousemcp-test || true

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Docker testing complete
        run: |
          echo "‚úÖ Docker Testing Complete for ${{ matrix.platform }}!"
          echo "Platform: ${{ matrix.platform }}"
          echo "All tests passed successfully"

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Test Docker Compose build
        run: |
          echo "üê≥ Testing Docker Compose build..."
          docker compose build dollhousemcp

      - name: Test Docker Compose startup
        run: |
          echo "üöÄ Testing Docker Compose startup..."
          
          # Run MCP server and capture logs (MCP servers exit after initialization)
          docker compose run --rm dollhousemcp &
          compose_pid=$!
          
          # Brief initial wait to prevent race conditions
          sleep 3
          
          # Wait for initialization with retry logic
          echo "‚è≥ Waiting for MCP server initialization..."
          timeout=30
          elapsed=0
          initialized=false
          
          while [ $elapsed -lt $timeout ]; do
            if docker compose logs dollhousemcp 2>/dev/null | grep -q "DollhouseMCP server running on stdio"; then
              echo "‚úÖ Docker Compose MCP server initialized successfully"
              initialized=true
              break
            fi
            sleep 2
            elapsed=$((elapsed + 2))
            echo "‚è≥ Waiting... ($elapsed/$timeout seconds)"
          done
          
          if [ "$initialized" = false ]; then
            echo "‚ùå Docker Compose MCP server failed to initialize within $timeout seconds"
            docker compose logs dollhousemcp
            exit 1
          fi

      - name: Test Docker Compose functionality
        run: |
          echo "üîç Testing Docker Compose MCP server functionality..."
          
          # Cache logs once for efficiency
          compose_logs=$(docker compose logs dollhousemcp 2>/dev/null || echo "")
          
          # Test that server can load personas and initialize properly
          echo "Testing MCP server persona loading..."
          
          if echo "$compose_logs" | grep -q "Loaded persona:"; then
            echo "‚úÖ MCP server loaded personas successfully"
            persona_count=$(echo "$compose_logs" | grep -c "Loaded persona:" || echo "0")
            echo "üìä Loaded $persona_count personas"
          else
            echo "‚ùå MCP server failed to load personas"
            echo "$compose_logs"
            exit 1
          fi
          
          # Verify no critical errors during initialization
          if echo "$compose_logs" | grep -i "error\|failed\|exception"; then
            echo "‚ùå Critical errors found during MCP server initialization"
            exit 1
          else
            echo "‚úÖ No critical errors during initialization"
          fi

      - name: Cleanup Docker Compose
        if: always()
        run: |
          echo "üßπ Cleaning up Docker Compose..."
          docker compose down
          docker compose rm -f

      - name: Docker Compose testing complete
        run: |
          echo "‚úÖ Docker Compose Testing Complete!"
          echo "All tests passed successfully"