{
  "timestamp": "2025-08-21T19:12:18.449Z",
  "duration": "257ms",
  "tests": [
    {
      "test": "connection",
      "success": true,
      "result": {
        "content": [
          {
            "type": "text",
            "text": "üë§ **User Identity: Anonymous**\n\nüîí **Status:** Anonymous mode\nüìù **Attribution:** Personas will use anonymous IDs\n\n**To set your identity:**\n‚Ä¢ Use: `set_user_identity \"your-username\"`\n‚Ä¢ Or set environment variable: `DOLLHOUSE_USER=your-username`"
          }
        ]
      }
    },
    {
      "test": "tools_availability",
      "success": true,
      "toolCount": 42,
      "tools": [
        {
          "name": "list_elements",
          "description": "List all available elements of a specific type",
          "inputSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The element type to list",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        },
        {
          "name": "activate_element",
          "description": "Activate a specific element by name",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name to activate"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              }
            },
            "required": [
              "name",
              "type"
            ]
          }
        },
        {
          "name": "get_active_elements",
          "description": "Get information about currently active elements of a specific type",
          "inputSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The element type to check",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        },
        {
          "name": "deactivate_element",
          "description": "Deactivate a specific element",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name to deactivate"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              }
            },
            "required": [
              "name",
              "type"
            ]
          }
        },
        {
          "name": "get_element_details",
          "description": "Get detailed information about a specific element",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name to get details for"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              }
            },
            "required": [
              "name",
              "type"
            ]
          }
        },
        {
          "name": "reload_elements",
          "description": "Reload elements of a specific type from the filesystem",
          "inputSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The element type to reload",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        },
        {
          "name": "render_template",
          "description": "Render a template element with provided variables",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The template name to render"
              },
              "variables": {
                "type": "object",
                "description": "Variables to use in the template",
                "additionalProperties": true
              }
            },
            "required": [
              "name",
              "variables"
            ]
          }
        },
        {
          "name": "execute_agent",
          "description": "Execute an agent element with a specific goal",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The agent name to execute"
              },
              "goal": {
                "type": "string",
                "description": "The goal for the agent to achieve"
              }
            },
            "required": [
              "name",
              "goal"
            ]
          }
        },
        {
          "name": "create_element",
          "description": "Create a new element of any type",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              },
              "description": {
                "type": "string",
                "description": "Element description"
              },
              "content": {
                "type": "string",
                "description": "Element content (required for some types)"
              },
              "metadata": {
                "type": "object",
                "description": "Additional metadata specific to element type",
                "additionalProperties": true
              }
            },
            "required": [
              "name",
              "type",
              "description"
            ]
          }
        },
        {
          "name": "edit_element",
          "description": "Edit an existing element of any type",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name to edit"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              },
              "field": {
                "type": "string",
                "description": "The field to edit (e.g., 'description', 'metadata.author', 'content')"
              },
              "value": {
                "description": "The new value for the field",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "name",
              "type",
              "field",
              "value"
            ]
          }
        },
        {
          "name": "validate_element",
          "description": "Validate an element for correctness and best practices",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name to validate"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              },
              "strict": {
                "type": "boolean",
                "description": "Whether to apply strict validation rules",
                "default": false
              }
            },
            "required": [
              "name",
              "type"
            ]
          }
        },
        {
          "name": "delete_element",
          "description": "Delete an element and optionally its associated data files",
          "inputSchema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The element name to delete"
              },
              "type": {
                "type": "string",
                "description": "The element type",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ]
              },
              "deleteData": {
                "type": "boolean",
                "description": "Whether to delete associated data files (if not specified, will prompt)"
              }
            },
            "required": [
              "name",
              "type"
            ]
          }
        },
        {
          "name": "export_persona",
          "description": "Export a single persona to a JSON format",
          "inputSchema": {
            "type": "object",
            "properties": {
              "persona": {
                "type": "string",
                "description": "The persona name or filename to export"
              }
            },
            "required": [
              "persona"
            ]
          }
        },
        {
          "name": "export_all_personas",
          "description": "Export all personas to a JSON bundle",
          "inputSchema": {
            "type": "object",
            "properties": {
              "includeDefaults": {
                "type": "boolean",
                "description": "Include default personas in export (default: true)"
              }
            }
          }
        },
        {
          "name": "import_persona",
          "description": "Import a persona from a file path or JSON string",
          "inputSchema": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "description": "File path to a .md or .json file, or a JSON string of the persona"
              },
              "overwrite": {
                "type": "boolean",
                "description": "Overwrite if persona already exists (default: false)"
              }
            },
            "required": [
              "source"
            ]
          }
        },
        {
          "name": "share_persona",
          "description": "Generate a shareable URL for a persona",
          "inputSchema": {
            "type": "object",
            "properties": {
              "persona": {
                "type": "string",
                "description": "The persona name or filename to share"
              },
              "expiryDays": {
                "type": "number",
                "description": "Number of days the share link is valid (default: 7)"
              }
            },
            "required": [
              "persona"
            ]
          }
        },
        {
          "name": "import_from_url",
          "description": "Import a persona from a shared URL",
          "inputSchema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "The shared URL to import from"
              },
              "overwrite": {
                "type": "boolean",
                "description": "Overwrite if persona already exists (default: false)"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        {
          "name": "browse_collection",
          "description": "Browse content from the DollhouseMCP collection by section and content type. Content types include personas (AI behavioral profiles), skills, agents, and templates. When users ask for 'personas', they're referring to content in the personas type.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "section": {
                "type": "string",
                "description": "Collection section to browse (library, showcase, catalog). Leave empty to see all sections."
              },
              "type": {
                "type": "string",
                "description": "Content type within the library section: personas, skills, agents, or templates. Only used when section is 'library'."
              }
            }
          }
        },
        {
          "name": "search_collection",
          "description": "Search for content in the collection by keywords. This searches all content types including personas (AI behavioral profiles that users activate to change AI behavior), skills, agents, prompts, etc. When a user asks to 'find a persona', search in the collection.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query for finding content. Examples: 'creative writer', 'explain like I'm five', 'coding assistant'. Users typically search for personas by their behavioral traits or names."
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "search_collection_enhanced",
          "description": "Enhanced search for collection content with pagination, filtering, and sorting. Use this for advanced searches when users need specific content types or want to browse results in pages.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query for finding content. Examples: 'creative writer', 'explain like I'm five', 'coding assistant'."
              },
              "elementType": {
                "type": "string",
                "description": "Filter by content type: personas, skills, agents, templates, tools, ensembles, memories, prompts",
                "enum": [
                  "personas",
                  "skills",
                  "agents",
                  "templates",
                  "tools",
                  "ensembles",
                  "memories",
                  "prompts"
                ]
              },
              "category": {
                "type": "string",
                "description": "Filter by category: creative, professional, educational, personal, gaming",
                "enum": [
                  "creative",
                  "professional",
                  "educational",
                  "personal",
                  "gaming"
                ]
              },
              "page": {
                "type": "number",
                "description": "Page number for paginated results (default: 1)",
                "minimum": 1
              },
              "pageSize": {
                "type": "number",
                "description": "Number of results per page (default: 25, max: 100)",
                "minimum": 1,
                "maximum": 100
              },
              "sortBy": {
                "type": "string",
                "description": "Sort results by relevance, name, or date",
                "enum": [
                  "relevance",
                  "name",
                  "date"
                ]
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "get_collection_content",
          "description": "Get detailed information about content from the collection. Use this when users ask to 'see details about a persona' or 'show me the creative writer persona'. Personas are a type of content that defines AI behavioral profiles.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The collection path to the AI customization element. Format: 'library/[type]/[element].md' where type is personas, skills, templates, or agents. Example: 'library/skills/code-review.md'."
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "install_content",
          "description": "Install AI customization elements from the collection to your local portfolio. Use this when users ask to download/install any element type (personas, skills, templates, or agents). Examples: 'install the creative writer persona', 'get the code review skill', 'download the meeting notes template'.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The collection path to the AI customization element. Format: 'library/[type]/[element].md' where type is personas, skills, templates, or agents. Example: 'library/skills/code-review.md'."
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "submit_content",
          "description": "Submit local content to the collection for community review. Use this when users want to 'share their persona' or 'submit a persona to the collection'. This handles all content types including personas (AI behavioral profiles).",
          "inputSchema": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "The content name or filename to submit. For personas, use the persona's name (e.g., 'Creative Writer') or filename. The system will recognize it as a persona based on its metadata."
              }
            },
            "required": [
              "content"
            ]
          }
        },
        {
          "name": "get_collection_cache_health",
          "description": "Get health status and statistics for the collection cache system. This helps monitor cache performance and identify any issues with offline browsing capability.",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "set_user_identity",
          "description": "Set your username for persona attribution and collection participation",
          "inputSchema": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Your username (alphanumeric, hyphens, underscores, dots)"
              },
              "email": {
                "type": "string",
                "description": "Your email address (optional)"
              }
            },
            "required": [
              "username"
            ]
          }
        },
        {
          "name": "get_user_identity",
          "description": "Get current user identity information",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "clear_user_identity",
          "description": "Clear user identity and return to anonymous mode",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "setup_github_auth",
          "description": "Set up GitHub authentication to access all DollhouseMCP features. This uses GitHub's secure device flow - no passwords needed! Use this when users say things like 'connect to GitHub', 'set up GitHub', 'I have a GitHub account now', or when they try to submit content without authentication.",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "check_github_auth",
          "description": "Check current GitHub authentication status. Shows whether you're connected to GitHub, your username, and what actions are available. Use when users ask 'am I connected to GitHub?', 'what's my GitHub status?', or similar questions.",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "clear_github_auth",
          "description": "Remove GitHub authentication and disconnect from GitHub. Use when users say 'disconnect from GitHub', 'remove my GitHub connection', 'clear authentication', or want to switch accounts.",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "configure_oauth",
          "description": "Configure GitHub OAuth client ID for authentication. If no client_id provided, shows current configuration status. If client_id provided, validates format and saves it to config. Use when users need to set up OAuth or check their configuration.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "client_id": {
                "type": "string",
                "description": "GitHub OAuth client ID (starts with 'Ov23li' followed by at least 14 alphanumeric characters)"
              }
            }
          }
        },
        {
          "name": "portfolio_status",
          "description": "Check the status of your GitHub portfolio repository including repository existence, elements count, sync status, and configuration details.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "GitHub username to check portfolio for. If not provided, uses the authenticated user's username."
              }
            }
          }
        },
        {
          "name": "init_portfolio",
          "description": "Initialize a new GitHub portfolio repository for storing your DollhouseMCP elements. Creates the repository structure with proper directories and README.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "repository_name": {
                "type": "string",
                "description": "Name for the portfolio repository. Defaults to 'dollhouse-portfolio' if not specified."
              },
              "private": {
                "type": "boolean",
                "description": "Whether to create a private repository. Defaults to false (public)."
              },
              "description": {
                "type": "string",
                "description": "Repository description. Defaults to 'My DollhouseMCP element portfolio'."
              }
            }
          }
        },
        {
          "name": "portfolio_config",
          "description": "Configure portfolio settings such as auto-sync preferences, default visibility, submission settings, and repository preferences.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "auto_sync": {
                "type": "boolean",
                "description": "Whether to automatically sync local changes to GitHub portfolio."
              },
              "default_visibility": {
                "type": "string",
                "enum": [
                  "public",
                  "private"
                ],
                "description": "Default visibility for new portfolio repositories."
              },
              "auto_submit": {
                "type": "boolean",
                "description": "Whether to automatically submit elements to the collection when they're added to portfolio."
              },
              "repository_name": {
                "type": "string",
                "description": "Default repository name for new portfolios."
              }
            }
          }
        },
        {
          "name": "sync_portfolio",
          "description": "Sync your local portfolio with GitHub repository. This uploads any new or modified elements to GitHub and can optionally pull remote changes.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "direction": {
                "type": "string",
                "enum": [
                  "push",
                  "pull",
                  "both"
                ],
                "description": "Sync direction: 'push' (upload to GitHub), 'pull' (download from GitHub), or 'both' (bidirectional sync). Defaults to 'push'."
              },
              "force": {
                "type": "boolean",
                "description": "Whether to force sync even if there are conflicts. Use with caution as this may overwrite changes."
              },
              "dry_run": {
                "type": "boolean",
                "description": "Show what would be synced without actually performing the sync."
              }
            }
          }
        },
        {
          "name": "search_portfolio",
          "description": "Search your local portfolio by content name, metadata, keywords, tags, or description. This searches your local elements using the portfolio index for fast metadata-based lookups.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query. Can match element names, keywords, tags, triggers, or descriptions. Examples: 'creative writer', 'debug', 'code review', 'research'."
              },
              "type": {
                "type": "string",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ],
                "description": "Limit search to specific element type. If not specified, searches all types."
              },
              "fuzzy_match": {
                "type": "boolean",
                "description": "Enable fuzzy matching for approximate name matches. Defaults to true."
              },
              "max_results": {
                "type": "number",
                "description": "Maximum number of results to return. Defaults to 20."
              },
              "include_keywords": {
                "type": "boolean",
                "description": "Include keyword matching in search. Defaults to true."
              },
              "include_tags": {
                "type": "boolean",
                "description": "Include tag matching in search. Defaults to true."
              },
              "include_triggers": {
                "type": "boolean",
                "description": "Include trigger word matching in search (for personas). Defaults to true."
              },
              "include_descriptions": {
                "type": "boolean",
                "description": "Include description text matching in search. Defaults to true."
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "search_all",
          "description": "Search across all available sources (local portfolio, GitHub portfolio, and collection) for elements. This provides unified search with duplicate detection and version comparison across all three tiers of the DollhouseMCP ecosystem.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Search query. Can match element names, keywords, tags, triggers, or descriptions across all sources."
              },
              "sources": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "local",
                    "github",
                    "collection"
                  ]
                },
                "description": "Sources to search. Defaults to ['local', 'github']. Include 'collection' to search the community collection."
              },
              "type": {
                "type": "string",
                "enum": [
                  "personas",
                  "skills",
                  "templates",
                  "agents",
                  "memories",
                  "ensembles"
                ],
                "description": "Limit search to specific element type. If not specified, searches all types."
              },
              "page": {
                "type": "number",
                "description": "Page number for pagination (1-based). Defaults to 1."
              },
              "page_size": {
                "type": "number",
                "description": "Number of results per page. Defaults to 20."
              },
              "sort_by": {
                "type": "string",
                "enum": [
                  "relevance",
                  "source",
                  "name",
                  "version"
                ],
                "description": "Sort results by criteria. Defaults to 'relevance'."
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "configure_indicator",
          "description": "Configure how active persona indicators are displayed",
          "inputSchema": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Enable or disable persona indicators"
              },
              "style": {
                "type": "string",
                "description": "Display style: full, minimal, compact, or custom"
              },
              "customFormat": {
                "type": "string",
                "description": "Custom format string (for style=custom). Use placeholders: {name}, {version}, {author}, {category}"
              },
              "includeEmoji": {
                "type": "boolean",
                "description": "Include emoji in indicator (üé≠)"
              },
              "includeBrackets": {
                "type": "boolean",
                "description": "Wrap indicator in brackets"
              },
              "includeVersion": {
                "type": "boolean",
                "description": "Include version in indicator"
              },
              "includeAuthor": {
                "type": "boolean",
                "description": "Include author in indicator"
              },
              "includeCategory": {
                "type": "boolean",
                "description": "Include category in indicator"
              }
            }
          }
        },
        {
          "name": "get_indicator_config",
          "description": "Get current persona indicator configuration",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "configure_collection_submission",
          "description": "Configure automatic collection submission settings. When enabled, the submit_content tool will automatically create a submission issue in the DollhouseMCP collection repository after uploading to your portfolio.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "autoSubmit": {
                "type": "boolean",
                "description": "Enable automatic submission to DollhouseMCP collection after portfolio upload. When false, content is only uploaded to your personal portfolio."
              }
            },
            "required": [
              "autoSubmit"
            ]
          }
        },
        {
          "name": "get_collection_submission_config",
          "description": "Get current collection submission configuration settings",
          "inputSchema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "get_build_info",
          "description": "Get comprehensive build and runtime information about the server",
          "inputSchema": {
            "type": "object",
            "properties": {},
            "required": []
          }
        }
      ]
    }
  ]
}